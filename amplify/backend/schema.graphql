type Conversation {
	createdAt: String
	id: ID!
	messages(after: String, first: Int): MessageConnection
	name: String!
}

type User @model {
  id: ID!
  username: String!
  firstName: String
  lastName: String
  bio: String
  image: String
}

input CreateMeasurementInput {
	measurementId: String!
	createdAt: String!
	chest: Int
	hips: Int
	leftArm: Int
	leftThigh: Int
	rightArm: Int
	rightThigh: Int
	waist: Int
	weight: Int
}

input DeleteMeasurementInput {
	measurementId: String!
	createdAt: String!
}

type Measurement {
	measurementId: String!
	createdAt: String!
	chest: Int
	hips: Int
	leftArm: Int
	leftThigh: Int
	rightArm: Int
	rightThigh: Int
	waist: Int
	weight: Int
}

type MeasurementConnection {
	items: [Measurement]
	nextToken: String
}

type Message {
	author: User
	content: String!
	conversationId: ID!
	createdAt: String
	id: ID!
	isSent: Boolean
	recipient: User
	sender: String
}

type MessageConnection {
	messages: [Message]
	nextToken: String
}

type Mutation {
	createConversation(createdAt: String, id: ID!, name: String!): Conversation
	createMessage(
		content: String,
		conversationId: ID!,
		createdAt: String!,
		id: ID!
	): Message
	createUser(username: String!): User
	createUserConversations(conversationId: ID!, userId: ID!): UserConversations
	createMeasurement(input: CreateMeasurementInput!): Measurement
	updateMeasurement(input: UpdateMeasurementInput!): Measurement
	deleteMeasurement(input: DeleteMeasurementInput!): Measurement
}

type Query {
	allMessage(after: String, conversationId: ID!, first: Int): [Message]
	allMessageConnection(after: String, conversationId: ID!, first: Int): MessageConnection
	allMessageFrom(
		after: String,
		conversationId: ID!,
		first: Int,
		sender: String!
	): [Message]
	allMember(after: String, first: Int): [User]
	me: User
	getMeasurement(measurementId: String!, createdAt: String!): Measurement
	listMeasurements(filter: TableMeasurementFilterInput, limit: Int, nextToken: String): MeasurementConnection
}

type Subscription {
	subscribeToNewMessage(conversationId: ID!): Message
		@aws_subscribe(mutations: ["createMessage"])
	subscribeToNewUCs(userId: ID!): UserConversations
		@aws_subscribe(mutations: ["createUserConversations"])
	subscribeToNewUsers: User
		@aws_subscribe(mutations: ["createUser"])
	onCreateMeasurement(
		measurementId: String,
		createdAt: String,
		chest: Int,
		hips: Int,
		leftArm: Int
	): Measurement
		@aws_subscribe(mutations: ["createMeasurement"])
	onUpdateMeasurement(
		measurementId: String,
		createdAt: String,
		chest: Int,
		hips: Int,
		leftArm: Int
	): Measurement
		@aws_subscribe(mutations: ["updateMeasurement"])
	onDeleteMeasurement(
		measurementId: String,
		createdAt: String,
		chest: Int,
		hips: Int,
		leftArm: Int
	): Measurement
		@aws_subscribe(mutations: ["deleteMeasurement"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableMeasurementFilterInput {
	measurementId: TableStringFilterInput
	createdAt: TableStringFilterInput
	chest: TableIntFilterInput
	hips: TableIntFilterInput
	leftArm: TableIntFilterInput
	leftThigh: TableIntFilterInput
	rightArm: TableIntFilterInput
	rightThigh: TableIntFilterInput
	waist: TableIntFilterInput
	weight: TableIntFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateMeasurementInput {
	measurementId: String!
	createdAt: String!
	chest: Int
	hips: Int
	leftArm: Int
	leftThigh: Int
	rightArm: Int
	rightThigh: Int
	waist: Int
	weight: Int
}

type User {
	cognitoId: ID!
	conversations(after: String, first: Int): UserConverstationsConnection
	id: ID!
	messages(after: String, first: Int): MessageConnection
	username: String!
	registered: Boolean
}

type UserConversations {
	associated: [UserConversations]
	conversation: Conversation
	conversationId: ID!
	user: User
	userId: ID!
}

type UserConverstationsConnection {
	nextToken: String
	userConversations: [UserConversations]
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}